{"version":3,"file":"static/js/530.4f789fc0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/SearchFilter/SearchFilter.module.css?1801","components/SearchFilter/SearchFilter.jsx","pages/ContactsPages.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactDeleteBtn\":\"ContactList_contactDeleteBtn__+MpkC\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactPerson\":\"ContactListItem_contactPerson__g-MQ7\"};","import React from \"react\";\nimport styles from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number}) => (\n        <p className={styles.contactPerson}>\n            ~ {name}: {number}\n        </p>\n    );\n\nContactListItem.propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n};\nexport default ContactListItem;","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { getContacts, getFilter } from '../../redux/contacts/selectors';\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul className={styles.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.contactItem}>\n          <ContactListItem id={id} name={name} number={number} />\n          <button\n            type=\"button\"\n            className={styles.contactDeleteBtn}\n            onClick={() => dispatch(deleteContacts(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"inputLabel\":\"ContactForm_inputLabel__LEeFC\",\"inputContent\":\"ContactForm_inputContent__DfDo6\",\"addContact\":\"ContactForm_addContact__Q30Jz\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { addContacts } from '../../redux/contacts/operations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = nanoid();\n  const telId = nanoid();\n\n  const handleChangeName = evt => {\n    setName(evt.target.value);\n  };\n\n  const handleChangeNumner = evt => {\n    setNumber(evt.target.value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    contacts.find(contact => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(\n          addContacts({\n            id: nanoid(),\n            name: name,\n            number: number,\n          })\n        );\n    reset();\n  };\n\n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\n      <label className={styles.inputLabel}>\n        Name{' '}\n        <input\n          className={styles.inputContent}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={nameId}\n          value={name}\n          onChange={handleChangeName}\n        />\n      </label>\n      <label className={styles.inputLabel}>\n        Number{' '}\n        <input\n          className={styles.inputContent}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          id={telId}\n          onChange={handleChangeNumner}\n        />\n      </label>\n      <button type=\"submit\" className={styles.addContact}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"inputLabel\":\"SearchFilter_inputLabel__7pMDU\",\"inputContent\":\"SearchFilter_inputContent__Uk5hA\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './SearchFilter.module.css';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\n\nexport const SearchFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  return (\n    <>\n      <p className={styles.inputLabel}>Find contacts by name</p>\n      <input\n        className={styles.inputContent}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { SearchFilter } from 'components/SearchFilter/SearchFilter';\n\nexport const ContactsPages = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress ...'}</div>\n      <ContactForm />\n      <SearchFilter />\n      <ContactList />\n    </>\n  );\n};\n"],"names":["_ref","name","number","_jsxs","className","styles","children","getContacts","state","contacts","items","getFilter","filter","selectIsLoading","isLoading","ContactList","useSelector","dispatch","useDispatch","filteredContacts","contact","toLowerCase","includes","_jsx","map","id","ContactListItem","type","onClick","deleteContacts","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","nameId","telId","onSubmit","evt","preventDefault","find","alert","concat","addContacts","pattern","title","required","value","onChange","target","SearchFilter","_Fragment","e","setFilter","ContactsPages","useEffect","Helmet"],"sourceRoot":""}