{"version":3,"file":"static/js/736.0a910817.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/SearchFilter/SearchFilter.module.css?1801","components/SearchFilter/SearchFilter.jsx","pages/ContactsPages.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactDeleteBtn\":\"ContactList_contactDeleteBtn__+MpkC\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactPerson\":\"ContactListItem_contactPerson__g-MQ7\"};","import React from \"react\";\nimport styles from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number}) => (\n        <p className={styles.contactPerson}>\n            ~ {name}: {number}\n        </p>\n    );\n\nContactListItem.propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n};\nexport default ContactListItem;","import React from 'react';\nimport styles from './ContactList.module.css';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { selectContacts, getFilter } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {contacts.length > 0 ? (\n        <ul className={styles.contactList}>\n          {filteredContacts.map(({ id, name, number }) => (\n            <li key={id} className={styles.contactItem}>\n              <ContactListItem key={id} id={id} name={name} number={number} />\n              <button\n                type=\"button\"\n                className={styles.contactDeleteBtn}\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <h2>\n          {''}\n          Add contacts <br /> Your phonebook is empty{''}\n        </h2>\n      )}\n    </>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContacts } from '../../redux/contacts/operations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = nanoid();\n  const telId = nanoid();\n\n  const handleChangeName = evt => {\n    setName(evt.currentTarget.value);\n  };\n\n  const handleChangeNumner = evt => {\n    setNumber(evt.currentTarget.value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    contacts.some(contact => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(\n          addContacts({\n            id: nanoid(),\n            name: name,\n            number: number,\n          })\n        );\n    reset();\n  };\n\n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\n      <label className={styles.inputLabel}>\n        Name{' '}\n        <input\n          className={styles.inputContent}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={nameId}\n          value={name}\n          onChange={handleChangeName}\n        />\n      </label>\n      <label className={styles.inputLabel}>\n        Number{' '}\n        <input\n          className={styles.inputContent}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          id={telId}\n          onChange={handleChangeNumner}\n        />\n      </label>\n      <button type=\"submit\" className={styles.addContact}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"inputLabel\":\"SearchFilter_inputLabel__7pMDU\",\"inputContent\":\"SearchFilter_inputContent__Uk5hA\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from './SearchFilter.module.css';\nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const SearchFilter = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p className={styles.inputLabel}>Find contacts by name</p>\n      <input\n        className={styles.inputContent}\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { SearchFilter } from 'components/SearchFilter/SearchFilter';\nimport { selectIsLoggedIn } from '../redux/auth/selectorsAuth';\n\nexport const ContactsPages = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h2>Your contacts</h2>\n      {isLoggedIn ? (\n        <>\n          <ContactForm />\n          <SearchFilter />\n          <ContactList />\n        </>\n      ) : (\n        <p>No contacts.Please sing up or sing in!</p>\n      )}\n    </>\n  );\n};\n"],"names":["_ref","name","number","_jsxs","className","styles","children","ContactList","filter","useSelector","getFilter","contacts","selectContacts","dispatch","useDispatch","filteredContacts","contact","toLowerCase","includes","_jsx","_Fragment","length","map","id","ContactListItem","type","onClick","deleteContacts","nanoid","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","nameId","telId","onSubmit","evt","preventDefault","some","alert","concat","addContacts","pattern","title","required","value","onChange","currentTarget","SearchFilter","e","setFilter","target","ContactsPages","isLoggedIn","selectIsLoggedIn","useEffect","getContacts"],"sourceRoot":""}